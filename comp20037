import os
import numpy as np
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator

# Set the path to your dataset
train_dir = 'path/to/train/directory'
test_dir = 'path/to/test/directory'

# Preprocess the training data
train_datagen = ImageDataGenerator(rescale=1./255)  # Normalize pixel values between 0 and 1
train_generator = train_datagen.flow_from_directory(
        train_dir,
        target_size=(150, 150),  # Resize images to a consistent size
        batch_size=20,
        class_mode='binary')  # Since it's a binary classification problem, we use 'binary' class mode

# Preprocess the test data
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
        test_dir,
        target_size=(150, 150),
        batch_size=20,
        class_mode='binary')

# Build the CNN model
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Train the model
model.fit_generator(
        train_generator,
        steps_per_epoch=100,  # Number of batches per epoch
        epochs=10,  # Number of epochs
        validation_data=test_generator,
        validation_steps=50)  # Number of batches for validation

# Save the model
model.save('cats_vs_dogs_model.h5')
